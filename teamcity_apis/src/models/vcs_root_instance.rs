/*
 * TeamCity REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VcsRootInstance {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "vcs-root-id", skip_serializing_if = "Option::is_none")]
    pub vcs_root_id: Option<String>,
    #[serde(rename = "vcsRootInternalId", skip_serializing_if = "Option::is_none")]
    pub vcs_root_internal_id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "vcsName", skip_serializing_if = "Option::is_none")]
    pub vcs_name: Option<String>,
    #[serde(rename = "modificationCheckInterval", skip_serializing_if = "Option::is_none")]
    pub modification_check_interval: Option<i32>,
    #[serde(rename = "commitHookMode", skip_serializing_if = "Option::is_none")]
    pub commit_hook_mode: Option<bool>,
    #[serde(rename = "lastVersion", skip_serializing_if = "Option::is_none")]
    pub last_version: Option<String>,
    #[serde(rename = "lastVersionInternal", skip_serializing_if = "Option::is_none")]
    pub last_version_internal: Option<String>,
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    #[serde(rename = "vcs-root", skip_serializing_if = "Option::is_none")]
    pub vcs_root: Option<crate::models::VcsRoot>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<crate::models::VcsStatus>,
    #[serde(rename = "repositoryState", skip_serializing_if = "Option::is_none")]
    pub repository_state: Option<crate::models::RepositoryState>,
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<crate::models::Properties>,
    #[serde(rename = "repositoryIdStrings", skip_serializing_if = "Option::is_none")]
    pub repository_id_strings: Option<crate::models::Items>,
    #[serde(rename = "projectLocator", skip_serializing_if = "Option::is_none")]
    pub project_locator: Option<String>,
}

impl VcsRootInstance {
    pub fn new() -> VcsRootInstance {
        VcsRootInstance {
            id: None,
            vcs_root_id: None,
            vcs_root_internal_id: None,
            name: None,
            vcs_name: None,
            modification_check_interval: None,
            commit_hook_mode: None,
            last_version: None,
            last_version_internal: None,
            href: None,
            vcs_root: None,
            status: None,
            repository_state: None,
            properties: None,
            repository_id_strings: None,
            project_locator: None,
        }
    }
}



/*
 * TeamCity REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RelatedEntity {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    #[serde(rename = "unknown", skip_serializing_if = "Option::is_none")]
    pub unknown: Option<bool>,
    #[serde(rename = "internalId", skip_serializing_if = "Option::is_none")]
    pub internal_id: Option<String>,
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(rename = "build", skip_serializing_if = "Option::is_none")]
    pub build: Option<crate::models::Build>,
    #[serde(rename = "buildType", skip_serializing_if = "Option::is_none")]
    pub build_type: Option<crate::models::BuildType>,
    #[serde(rename = "project", skip_serializing_if = "Option::is_none")]
    pub project: Option<crate::models::Project>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<crate::models::User>,
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<crate::models::Group>,
    #[serde(rename = "test", skip_serializing_if = "Option::is_none")]
    pub test: Option<crate::models::Test>,
    #[serde(rename = "problem", skip_serializing_if = "Option::is_none")]
    pub problem: Option<crate::models::Problem>,
    #[serde(rename = "agent", skip_serializing_if = "Option::is_none")]
    pub agent: Option<crate::models::Agent>,
    #[serde(rename = "vcsRoot", skip_serializing_if = "Option::is_none")]
    pub vcs_root: Option<crate::models::VcsRoot>,
    #[serde(rename = "change", skip_serializing_if = "Option::is_none")]
    pub change: Option<crate::models::Change>,
    #[serde(rename = "agentPool", skip_serializing_if = "Option::is_none")]
    pub agent_pool: Option<crate::models::AgentPool>,
}

impl RelatedEntity {
    pub fn new() -> RelatedEntity {
        RelatedEntity {
            _type: None,
            unknown: None,
            internal_id: None,
            text: None,
            build: None,
            build_type: None,
            project: None,
            user: None,
            group: None,
            test: None,
            problem: None,
            agent: None,
            vcs_root: None,
            change: None,
            agent_pool: None,
        }
    }
}



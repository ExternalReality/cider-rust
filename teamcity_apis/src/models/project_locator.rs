/*
 * TeamCity REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProjectLocator {
    #[serde(rename = "affectedProject", skip_serializing_if = "Option::is_none")]
    pub affected_project: Option<String>,
    #[serde(rename = "archived", skip_serializing_if = "Option::is_none")]
    pub archived: Option<bool>,
    #[serde(rename = "build", skip_serializing_if = "Option::is_none")]
    pub build: Option<String>,
    #[serde(rename = "buildType", skip_serializing_if = "Option::is_none")]
    pub build_type: Option<String>,
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(rename = "defaultTemplate", skip_serializing_if = "Option::is_none")]
    pub default_template: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "internalId", skip_serializing_if = "Option::is_none")]
    pub internal_id: Option<String>,
    #[serde(rename = "item", skip_serializing_if = "Option::is_none")]
    pub item: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "pool", skip_serializing_if = "Option::is_none")]
    pub pool: Option<String>,
    #[serde(rename = "project", skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    #[serde(rename = "projectFeature", skip_serializing_if = "Option::is_none")]
    pub project_feature: Option<String>,
    #[serde(rename = "start", skip_serializing_if = "Option::is_none")]
    pub start: Option<i32>,
    #[serde(rename = "uuid", skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
    #[serde(rename = "vcsRoot", skip_serializing_if = "Option::is_none")]
    pub vcs_root: Option<String>,
}

impl ProjectLocator {
    pub fn new() -> ProjectLocator {
        ProjectLocator {
            affected_project: None,
            archived: None,
            build: None,
            build_type: None,
            count: None,
            default_template: None,
            id: None,
            internal_id: None,
            item: None,
            name: None,
            pool: None,
            project: None,
            project_feature: None,
            start: None,
            uuid: None,
            vcs_root: None,
        }
    }
}



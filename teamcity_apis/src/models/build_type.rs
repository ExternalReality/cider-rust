/*
 * TeamCity REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildType {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "internalId", skip_serializing_if = "Option::is_none")]
    pub internal_id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "templateFlag", skip_serializing_if = "Option::is_none")]
    pub template_flag: Option<bool>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    #[serde(rename = "paused", skip_serializing_if = "Option::is_none")]
    pub paused: Option<bool>,
    #[serde(rename = "uuid", skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "projectName", skip_serializing_if = "Option::is_none")]
    pub project_name: Option<String>,
    #[serde(rename = "projectId", skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(rename = "projectInternalId", skip_serializing_if = "Option::is_none")]
    pub project_internal_id: Option<String>,
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    #[serde(rename = "webUrl", skip_serializing_if = "Option::is_none")]
    pub web_url: Option<String>,
    #[serde(rename = "inherited", skip_serializing_if = "Option::is_none")]
    pub inherited: Option<bool>,
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<crate::models::Links>,
    #[serde(rename = "project", skip_serializing_if = "Option::is_none")]
    pub project: Option<Box<crate::models::Project>>,
    #[serde(rename = "templates", skip_serializing_if = "Option::is_none")]
    pub templates: Option<crate::models::BuildTypes>,
    #[serde(rename = "template", skip_serializing_if = "Option::is_none")]
    pub template: Option<Box<crate::models::BuildType>>,
    #[serde(rename = "vcs-root-entries", skip_serializing_if = "Option::is_none")]
    pub vcs_root_entries: Option<crate::models::VcsRootEntries>,
    #[serde(rename = "settings", skip_serializing_if = "Option::is_none")]
    pub settings: Option<crate::models::Properties>,
    #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<crate::models::Properties>,
    #[serde(rename = "steps", skip_serializing_if = "Option::is_none")]
    pub steps: Option<crate::models::Steps>,
    #[serde(rename = "features", skip_serializing_if = "Option::is_none")]
    pub features: Option<crate::models::Features>,
    #[serde(rename = "triggers", skip_serializing_if = "Option::is_none")]
    pub triggers: Option<crate::models::Triggers>,
    #[serde(rename = "snapshot-dependencies", skip_serializing_if = "Option::is_none")]
    pub snapshot_dependencies: Option<crate::models::SnapshotDependencies>,
    #[serde(rename = "artifact-dependencies", skip_serializing_if = "Option::is_none")]
    pub artifact_dependencies: Option<crate::models::ArtifactDependencies>,
    #[serde(rename = "agent-requirements", skip_serializing_if = "Option::is_none")]
    pub agent_requirements: Option<crate::models::AgentRequirements>,
    #[serde(rename = "branches", skip_serializing_if = "Option::is_none")]
    pub branches: Option<crate::models::Branches>,
    #[serde(rename = "builds", skip_serializing_if = "Option::is_none")]
    pub builds: Option<crate::models::Builds>,
    #[serde(rename = "investigations", skip_serializing_if = "Option::is_none")]
    pub investigations: Option<crate::models::Investigations>,
    #[serde(rename = "compatibleAgents", skip_serializing_if = "Option::is_none")]
    pub compatible_agents: Option<crate::models::Agents>,
    #[serde(rename = "vcsRootInstances", skip_serializing_if = "Option::is_none")]
    pub vcs_root_instances: Option<crate::models::VcsRootInstances>,
    #[serde(rename = "locator", skip_serializing_if = "Option::is_none")]
    pub locator: Option<String>,
}

impl BuildType {
    pub fn new() -> BuildType {
        BuildType {
            id: None,
            internal_id: None,
            name: None,
            template_flag: None,
            _type: None,
            paused: None,
            uuid: None,
            description: None,
            project_name: None,
            project_id: None,
            project_internal_id: None,
            href: None,
            web_url: None,
            inherited: None,
            links: None,
            project: None,
            templates: None,
            template: None,
            vcs_root_entries: None,
            settings: None,
            parameters: None,
            steps: None,
            features: None,
            triggers: None,
            snapshot_dependencies: None,
            artifact_dependencies: None,
            agent_requirements: None,
            branches: None,
            builds: None,
            investigations: None,
            compatible_agents: None,
            vcs_root_instances: None,
            locator: None,
        }
    }
}



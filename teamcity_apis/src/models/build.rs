/*
 * TeamCity REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Build {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "taskId", skip_serializing_if = "Option::is_none")]
    pub task_id: Option<i64>,
    #[serde(rename = "buildTypeId", skip_serializing_if = "Option::is_none")]
    pub build_type_id: Option<String>,
    #[serde(rename = "buildTypeInternalId", skip_serializing_if = "Option::is_none")]
    pub build_type_internal_id: Option<String>,
    #[serde(rename = "number", skip_serializing_if = "Option::is_none")]
    pub number: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "running", skip_serializing_if = "Option::is_none")]
    pub running: Option<bool>,
    #[serde(rename = "composite", skip_serializing_if = "Option::is_none")]
    pub composite: Option<bool>,
    #[serde(rename = "failedToStart", skip_serializing_if = "Option::is_none")]
    pub failed_to_start: Option<bool>,
    #[serde(rename = "personal", skip_serializing_if = "Option::is_none")]
    pub personal: Option<bool>,
    #[serde(rename = "percentageComplete", skip_serializing_if = "Option::is_none")]
    pub percentage_complete: Option<i32>,
    #[serde(rename = "branchName", skip_serializing_if = "Option::is_none")]
    pub branch_name: Option<String>,
    #[serde(rename = "defaultBranch", skip_serializing_if = "Option::is_none")]
    pub default_branch: Option<bool>,
    #[serde(rename = "unspecifiedBranch", skip_serializing_if = "Option::is_none")]
    pub unspecified_branch: Option<bool>,
    #[serde(rename = "history", skip_serializing_if = "Option::is_none")]
    pub history: Option<bool>,
    #[serde(rename = "pinned", skip_serializing_if = "Option::is_none")]
    pub pinned: Option<bool>,
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    #[serde(rename = "webUrl", skip_serializing_if = "Option::is_none")]
    pub web_url: Option<String>,
    #[serde(rename = "queuePosition", skip_serializing_if = "Option::is_none")]
    pub queue_position: Option<i32>,
    #[serde(rename = "limitedChangesCount", skip_serializing_if = "Option::is_none")]
    pub limited_changes_count: Option<i32>,
    #[serde(rename = "artifactsDirectory", skip_serializing_if = "Option::is_none")]
    pub artifacts_directory: Option<String>,
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<crate::models::Links>,
    #[serde(rename = "statusText", skip_serializing_if = "Option::is_none")]
    pub status_text: Option<String>,
    #[serde(rename = "buildType", skip_serializing_if = "Option::is_none")]
    pub build_type: Option<crate::models::BuildType>,
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<crate::models::Comment>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<crate::models::Tags>,
    #[serde(rename = "pinInfo", skip_serializing_if = "Option::is_none")]
    pub pin_info: Option<crate::models::Comment>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<crate::models::User>,
    #[serde(rename = "startEstimate", skip_serializing_if = "Option::is_none")]
    pub start_estimate: Option<String>,
    #[serde(rename = "waitReason", skip_serializing_if = "Option::is_none")]
    pub wait_reason: Option<String>,
    #[serde(rename = "finishEstimate", skip_serializing_if = "Option::is_none")]
    pub finish_estimate: Option<String>,
    #[serde(rename = "running-info", skip_serializing_if = "Option::is_none")]
    pub running_info: Option<Box<crate::models::ProgressInfo>>,
    #[serde(rename = "canceledInfo", skip_serializing_if = "Option::is_none")]
    pub canceled_info: Option<crate::models::Comment>,
    #[serde(rename = "queuedDate", skip_serializing_if = "Option::is_none")]
    pub queued_date: Option<String>,
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(rename = "finishDate", skip_serializing_if = "Option::is_none")]
    pub finish_date: Option<String>,
    #[serde(rename = "triggered", skip_serializing_if = "Option::is_none")]
    pub triggered: Option<Box<crate::models::TriggeredBy>>,
    #[serde(rename = "lastChanges", skip_serializing_if = "Option::is_none")]
    pub last_changes: Option<crate::models::Changes>,
    #[serde(rename = "changes", skip_serializing_if = "Option::is_none")]
    pub changes: Option<crate::models::Changes>,
    #[serde(rename = "revisions", skip_serializing_if = "Option::is_none")]
    pub revisions: Option<crate::models::Revisions>,
    #[serde(rename = "versionedSettingsRevision", skip_serializing_if = "Option::is_none")]
    pub versioned_settings_revision: Option<crate::models::Revision>,
    #[serde(rename = "artifactDependencyChanges", skip_serializing_if = "Option::is_none")]
    pub artifact_dependency_changes: Option<crate::models::BuildChanges>,
    #[serde(rename = "agent", skip_serializing_if = "Option::is_none")]
    pub agent: Option<crate::models::Agent>,
    #[serde(rename = "compatibleAgents", skip_serializing_if = "Option::is_none")]
    pub compatible_agents: Option<crate::models::Agents>,
    #[serde(rename = "testOccurrences", skip_serializing_if = "Option::is_none")]
    pub test_occurrences: Option<crate::models::TestOccurrences>,
    #[serde(rename = "problemOccurrences", skip_serializing_if = "Option::is_none")]
    pub problem_occurrences: Option<crate::models::ProblemOccurrences>,
    #[serde(rename = "artifacts", skip_serializing_if = "Option::is_none")]
    pub artifacts: Option<crate::models::Files>,
    #[serde(rename = "relatedIssues", skip_serializing_if = "Option::is_none")]
    pub related_issues: Option<crate::models::IssuesUsages>,
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<crate::models::Properties>,
    #[serde(rename = "resultingProperties", skip_serializing_if = "Option::is_none")]
    pub resulting_properties: Option<crate::models::Properties>,
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<crate::models::Entries>,
    #[serde(rename = "statistics", skip_serializing_if = "Option::is_none")]
    pub statistics: Option<crate::models::Properties>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<crate::models::Datas>,
    #[serde(rename = "snapshot-dependencies", skip_serializing_if = "Option::is_none")]
    pub snapshot_dependencies: Option<crate::models::Builds>,
    #[serde(rename = "artifact-dependencies", skip_serializing_if = "Option::is_none")]
    pub artifact_dependencies: Option<crate::models::Builds>,
    #[serde(rename = "custom-artifact-dependencies", skip_serializing_if = "Option::is_none")]
    pub custom_artifact_dependencies: Option<crate::models::ArtifactDependencies>,
    #[serde(rename = "settingsHash", skip_serializing_if = "Option::is_none")]
    pub settings_hash: Option<String>,
    #[serde(rename = "currentSettingsHash", skip_serializing_if = "Option::is_none")]
    pub current_settings_hash: Option<String>,
    #[serde(rename = "modificationId", skip_serializing_if = "Option::is_none")]
    pub modification_id: Option<String>,
    #[serde(rename = "chainModificationId", skip_serializing_if = "Option::is_none")]
    pub chain_modification_id: Option<String>,
    #[serde(rename = "replacementIds", skip_serializing_if = "Option::is_none")]
    pub replacement_ids: Option<crate::models::Items>,
    #[serde(rename = "related", skip_serializing_if = "Option::is_none")]
    pub related: Option<crate::models::Related>,
    #[serde(rename = "triggeringOptions", skip_serializing_if = "Option::is_none")]
    pub triggering_options: Option<crate::models::BuildTriggeringOptions>,
    #[serde(rename = "usedByOtherBuilds", skip_serializing_if = "Option::is_none")]
    pub used_by_other_builds: Option<bool>,
    #[serde(rename = "statusChangeComment", skip_serializing_if = "Option::is_none")]
    pub status_change_comment: Option<crate::models::Comment>,
    #[serde(rename = "vcsLabels", skip_serializing_if = "Option::is_none")]
    pub vcs_labels: Option<Vec<crate::models::VcsLabel>>,
    #[serde(rename = "detachedFromAgent", skip_serializing_if = "Option::is_none")]
    pub detached_from_agent: Option<bool>,
    #[serde(rename = "finishOnAgentDate", skip_serializing_if = "Option::is_none")]
    pub finish_on_agent_date: Option<String>,
    #[serde(rename = "customized", skip_serializing_if = "Option::is_none")]
    pub customized: Option<bool>,
    #[serde(rename = "customization", skip_serializing_if = "Option::is_none")]
    pub customization: Option<crate::models::Customizations>,
    #[serde(rename = "locator", skip_serializing_if = "Option::is_none")]
    pub locator: Option<String>,
}

impl Build {
    pub fn new() -> Build {
        Build {
            id: None,
            task_id: None,
            build_type_id: None,
            build_type_internal_id: None,
            number: None,
            status: None,
            state: None,
            running: None,
            composite: None,
            failed_to_start: None,
            personal: None,
            percentage_complete: None,
            branch_name: None,
            default_branch: None,
            unspecified_branch: None,
            history: None,
            pinned: None,
            href: None,
            web_url: None,
            queue_position: None,
            limited_changes_count: None,
            artifacts_directory: None,
            links: None,
            status_text: None,
            build_type: None,
            comment: None,
            tags: None,
            pin_info: None,
            user: None,
            start_estimate: None,
            wait_reason: None,
            finish_estimate: None,
            running_info: None,
            canceled_info: None,
            queued_date: None,
            start_date: None,
            finish_date: None,
            triggered: None,
            last_changes: None,
            changes: None,
            revisions: None,
            versioned_settings_revision: None,
            artifact_dependency_changes: None,
            agent: None,
            compatible_agents: None,
            test_occurrences: None,
            problem_occurrences: None,
            artifacts: None,
            related_issues: None,
            properties: None,
            resulting_properties: None,
            attributes: None,
            statistics: None,
            metadata: None,
            snapshot_dependencies: None,
            artifact_dependencies: None,
            custom_artifact_dependencies: None,
            settings_hash: None,
            current_settings_hash: None,
            modification_id: None,
            chain_modification_id: None,
            replacement_ids: None,
            related: None,
            triggering_options: None,
            used_by_other_builds: None,
            status_change_comment: None,
            vcs_labels: None,
            detached_from_agent: None,
            finish_on_agent_date: None,
            customized: None,
            customization: None,
            locator: None,
        }
    }
}



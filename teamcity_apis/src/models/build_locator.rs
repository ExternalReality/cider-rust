/*
 * TeamCity REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildLocator {
    #[serde(rename = "affectedProject", skip_serializing_if = "Option::is_none")]
    pub affected_project: Option<String>,
    #[serde(rename = "agent", skip_serializing_if = "Option::is_none")]
    pub agent: Option<String>,
    #[serde(rename = "agentTypeId", skip_serializing_if = "Option::is_none")]
    pub agent_type_id: Option<i32>,
    #[serde(rename = "any", skip_serializing_if = "Option::is_none")]
    pub any: Option<bool>,
    #[serde(rename = "artifactDependency", skip_serializing_if = "Option::is_none")]
    pub artifact_dependency: Option<String>,
    #[serde(rename = "branch", skip_serializing_if = "Option::is_none")]
    pub branch: Option<String>,
    #[serde(rename = "buildType", skip_serializing_if = "Option::is_none")]
    pub build_type: Option<String>,
    #[serde(rename = "canceled", skip_serializing_if = "Option::is_none")]
    pub canceled: Option<bool>,
    #[serde(rename = "compatibleAgent", skip_serializing_if = "Option::is_none")]
    pub compatible_agent: Option<String>,
    #[serde(rename = "composite", skip_serializing_if = "Option::is_none")]
    pub composite: Option<bool>,
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(rename = "defaultFilter", skip_serializing_if = "Option::is_none")]
    pub default_filter: Option<bool>,
    #[serde(rename = "failedToStart", skip_serializing_if = "Option::is_none")]
    pub failed_to_start: Option<bool>,
    #[serde(rename = "finishDate", skip_serializing_if = "Option::is_none")]
    pub finish_date: Option<String>,
    #[serde(rename = "finished", skip_serializing_if = "Option::is_none")]
    pub finished: Option<bool>,
    #[serde(rename = "hanging", skip_serializing_if = "Option::is_none")]
    pub hanging: Option<bool>,
    #[serde(rename = "history", skip_serializing_if = "Option::is_none")]
    pub history: Option<bool>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "item", skip_serializing_if = "Option::is_none")]
    pub item: Option<String>,
    #[serde(rename = "lookupLimit", skip_serializing_if = "Option::is_none")]
    pub lookup_limit: Option<i32>,
    #[serde(rename = "number", skip_serializing_if = "Option::is_none")]
    pub number: Option<String>,
    #[serde(rename = "personal", skip_serializing_if = "Option::is_none")]
    pub personal: Option<bool>,
    #[serde(rename = "pinned", skip_serializing_if = "Option::is_none")]
    pub pinned: Option<bool>,
    #[serde(rename = "project", skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    #[serde(rename = "property", skip_serializing_if = "Option::is_none")]
    pub property: Option<String>,
    #[serde(rename = "queued", skip_serializing_if = "Option::is_none")]
    pub queued: Option<bool>,
    #[serde(rename = "queuedDate", skip_serializing_if = "Option::is_none")]
    pub queued_date: Option<String>,
    #[serde(rename = "running", skip_serializing_if = "Option::is_none")]
    pub running: Option<bool>,
    #[serde(rename = "snapshotDependency", skip_serializing_if = "Option::is_none")]
    pub snapshot_dependency: Option<String>,
    #[serde(rename = "start", skip_serializing_if = "Option::is_none")]
    pub start: Option<i32>,
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(rename = "taskId", skip_serializing_if = "Option::is_none")]
    pub task_id: Option<i32>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

impl BuildLocator {
    pub fn new() -> BuildLocator {
        BuildLocator {
            affected_project: None,
            agent: None,
            agent_type_id: None,
            any: None,
            artifact_dependency: None,
            branch: None,
            build_type: None,
            canceled: None,
            compatible_agent: None,
            composite: None,
            count: None,
            default_filter: None,
            failed_to_start: None,
            finish_date: None,
            finished: None,
            hanging: None,
            history: None,
            id: None,
            item: None,
            lookup_limit: None,
            number: None,
            personal: None,
            pinned: None,
            project: None,
            property: None,
            queued: None,
            queued_date: None,
            running: None,
            snapshot_dependency: None,
            start: None,
            start_date: None,
            state: None,
            status: None,
            tag: None,
            task_id: None,
            user: None,
        }
    }
}



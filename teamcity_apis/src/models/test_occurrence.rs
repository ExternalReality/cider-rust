/*
 * TeamCity REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestOccurrence {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "ignored", skip_serializing_if = "Option::is_none")]
    pub ignored: Option<bool>,
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
    #[serde(rename = "runOrder", skip_serializing_if = "Option::is_none")]
    pub run_order: Option<String>,
    #[serde(rename = "newFailure", skip_serializing_if = "Option::is_none")]
    pub new_failure: Option<bool>,
    #[serde(rename = "muted", skip_serializing_if = "Option::is_none")]
    pub muted: Option<bool>,
    #[serde(rename = "currentlyMuted", skip_serializing_if = "Option::is_none")]
    pub currently_muted: Option<bool>,
    #[serde(rename = "currentlyInvestigated", skip_serializing_if = "Option::is_none")]
    pub currently_investigated: Option<bool>,
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    #[serde(rename = "ignoreDetails", skip_serializing_if = "Option::is_none")]
    pub ignore_details: Option<String>,
    #[serde(rename = "details", skip_serializing_if = "Option::is_none")]
    pub details: Option<String>,
    #[serde(rename = "test", skip_serializing_if = "Option::is_none")]
    pub test: Option<crate::models::Test>,
    #[serde(rename = "mute", skip_serializing_if = "Option::is_none")]
    pub mute: Option<crate::models::Mute>,
    #[serde(rename = "build", skip_serializing_if = "Option::is_none")]
    pub build: Option<crate::models::Build>,
    #[serde(rename = "firstFailed", skip_serializing_if = "Option::is_none")]
    pub first_failed: Option<Box<crate::models::TestOccurrence>>,
    #[serde(rename = "nextFixed", skip_serializing_if = "Option::is_none")]
    pub next_fixed: Option<Box<crate::models::TestOccurrence>>,
    #[serde(rename = "invocations", skip_serializing_if = "Option::is_none")]
    pub invocations: Option<crate::models::TestOccurrences>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<crate::models::TestRunMetadata>,
    #[serde(rename = "logAnchor", skip_serializing_if = "Option::is_none")]
    pub log_anchor: Option<String>,
}

impl TestOccurrence {
    pub fn new() -> TestOccurrence {
        TestOccurrence {
            id: None,
            name: None,
            status: None,
            ignored: None,
            duration: None,
            run_order: None,
            new_failure: None,
            muted: None,
            currently_muted: None,
            currently_investigated: None,
            href: None,
            ignore_details: None,
            details: None,
            test: None,
            mute: None,
            build: None,
            first_failed: None,
            next_fixed: None,
            invocations: None,
            metadata: None,
            log_anchor: None,
        }
    }
}



/*
 * TeamCity REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Agent {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "typeId", skip_serializing_if = "Option::is_none")]
    pub type_id: Option<i32>,
    #[serde(rename = "connected", skip_serializing_if = "Option::is_none")]
    pub connected: Option<bool>,
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(rename = "authorized", skip_serializing_if = "Option::is_none")]
    pub authorized: Option<bool>,
    #[serde(rename = "uptodate", skip_serializing_if = "Option::is_none")]
    pub uptodate: Option<bool>,
    #[serde(rename = "outdated", skip_serializing_if = "Option::is_none")]
    pub outdated: Option<bool>,
    #[serde(rename = "pluginsOutdated", skip_serializing_if = "Option::is_none")]
    pub plugins_outdated: Option<bool>,
    #[serde(rename = "javaOutdated", skip_serializing_if = "Option::is_none")]
    pub java_outdated: Option<bool>,
    #[serde(rename = "ip", skip_serializing_if = "Option::is_none")]
    pub ip: Option<String>,
    #[serde(rename = "protocol", skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "currentAgentVersion", skip_serializing_if = "Option::is_none")]
    pub current_agent_version: Option<String>,
    #[serde(rename = "lastActivityTime", skip_serializing_if = "Option::is_none")]
    pub last_activity_time: Option<String>,
    #[serde(rename = "idleSinceTime", skip_serializing_if = "Option::is_none")]
    pub idle_since_time: Option<String>,
    #[serde(rename = "disconnectionComment", skip_serializing_if = "Option::is_none")]
    pub disconnection_comment: Option<String>,
    #[serde(rename = "registrationTimestamp", skip_serializing_if = "Option::is_none")]
    pub registration_timestamp: Option<String>,
    #[serde(rename = "host", skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(rename = "cpuRank", skip_serializing_if = "Option::is_none")]
    pub cpu_rank: Option<i32>,
    #[serde(rename = "port", skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    #[serde(rename = "webUrl", skip_serializing_if = "Option::is_none")]
    pub web_url: Option<String>,
    #[serde(rename = "build", skip_serializing_if = "Option::is_none")]
    pub build: Option<Box<crate::models::Build>>,
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<crate::models::Links>,
    #[serde(rename = "enabledInfo", skip_serializing_if = "Option::is_none")]
    pub enabled_info: Option<crate::models::EnabledInfo>,
    #[serde(rename = "authorizedInfo", skip_serializing_if = "Option::is_none")]
    pub authorized_info: Option<crate::models::AuthorizedInfo>,
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<crate::models::Properties>,
    #[serde(rename = "cloudInstance", skip_serializing_if = "Option::is_none")]
    pub cloud_instance: Option<Box<crate::models::CloudInstance>>,
    #[serde(rename = "cloudImage", skip_serializing_if = "Option::is_none")]
    pub cloud_image: Option<crate::models::CloudImage>,
    #[serde(rename = "environment", skip_serializing_if = "Option::is_none")]
    pub environment: Option<crate::models::Environment>,
    #[serde(rename = "pool", skip_serializing_if = "Option::is_none")]
    pub pool: Option<crate::models::AgentPool>,
    #[serde(rename = "compatibilityPolicy", skip_serializing_if = "Option::is_none")]
    pub compatibility_policy: Option<crate::models::CompatibilityPolicy>,
    #[serde(rename = "compatibleBuildTypes", skip_serializing_if = "Option::is_none")]
    pub compatible_build_types: Option<crate::models::BuildTypes>,
    #[serde(rename = "incompatibleBuildTypes", skip_serializing_if = "Option::is_none")]
    pub incompatible_build_types: Option<crate::models::Compatibilities>,
    #[serde(rename = "builds", skip_serializing_if = "Option::is_none")]
    pub builds: Option<crate::models::Builds>,
    #[serde(rename = "locator", skip_serializing_if = "Option::is_none")]
    pub locator: Option<String>,
}

impl Agent {
    pub fn new() -> Agent {
        Agent {
            id: None,
            name: None,
            type_id: None,
            connected: None,
            enabled: None,
            authorized: None,
            uptodate: None,
            outdated: None,
            plugins_outdated: None,
            java_outdated: None,
            ip: None,
            protocol: None,
            version: None,
            current_agent_version: None,
            last_activity_time: None,
            idle_since_time: None,
            disconnection_comment: None,
            registration_timestamp: None,
            host: None,
            cpu_rank: None,
            port: None,
            href: None,
            web_url: None,
            build: None,
            links: None,
            enabled_info: None,
            authorized_info: None,
            properties: None,
            cloud_instance: None,
            cloud_image: None,
            environment: None,
            pool: None,
            compatibility_policy: None,
            compatible_build_types: None,
            incompatible_build_types: None,
            builds: None,
            locator: None,
        }
    }
}



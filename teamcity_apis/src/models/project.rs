/*
 * TeamCity REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Project {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "internalId", skip_serializing_if = "Option::is_none")]
    pub internal_id: Option<String>,
    #[serde(rename = "uuid", skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "parentProjectId", skip_serializing_if = "Option::is_none")]
    pub parent_project_id: Option<String>,
    #[serde(rename = "parentProjectInternalId", skip_serializing_if = "Option::is_none")]
    pub parent_project_internal_id: Option<String>,
    #[serde(rename = "parentProjectName", skip_serializing_if = "Option::is_none")]
    pub parent_project_name: Option<String>,
    #[serde(rename = "archived", skip_serializing_if = "Option::is_none")]
    pub archived: Option<bool>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    #[serde(rename = "webUrl", skip_serializing_if = "Option::is_none")]
    pub web_url: Option<String>,
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<crate::models::Links>,
    #[serde(rename = "parentProject", skip_serializing_if = "Option::is_none")]
    pub parent_project: Option<Box<crate::models::Project>>,
    #[serde(rename = "readOnlyUI", skip_serializing_if = "Option::is_none")]
    pub read_only_ui: Option<crate::models::StateField>,
    #[serde(rename = "defaultTemplate", skip_serializing_if = "Option::is_none")]
    pub default_template: Option<crate::models::BuildType>,
    #[serde(rename = "buildTypes", skip_serializing_if = "Option::is_none")]
    pub build_types: Option<crate::models::BuildTypes>,
    #[serde(rename = "templates", skip_serializing_if = "Option::is_none")]
    pub templates: Option<crate::models::BuildTypes>,
    #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<crate::models::Properties>,
    #[serde(rename = "vcsRoots", skip_serializing_if = "Option::is_none")]
    pub vcs_roots: Option<crate::models::VcsRoots>,
    #[serde(rename = "projectFeatures", skip_serializing_if = "Option::is_none")]
    pub project_features: Option<crate::models::ProjectFeatures>,
    #[serde(rename = "projects", skip_serializing_if = "Option::is_none")]
    pub projects: Option<crate::models::Projects>,
    #[serde(rename = "cloudProfiles", skip_serializing_if = "Option::is_none")]
    pub cloud_profiles: Option<crate::models::CloudProfiles>,
    #[serde(rename = "locator", skip_serializing_if = "Option::is_none")]
    pub locator: Option<String>,
}

impl Project {
    pub fn new() -> Project {
        Project {
            id: None,
            internal_id: None,
            uuid: None,
            name: None,
            parent_project_id: None,
            parent_project_internal_id: None,
            parent_project_name: None,
            archived: None,
            description: None,
            href: None,
            web_url: None,
            links: None,
            parent_project: None,
            read_only_ui: None,
            default_template: None,
            build_types: None,
            templates: None,
            parameters: None,
            vcs_roots: None,
            project_features: None,
            projects: None,
            cloud_profiles: None,
            locator: None,
        }
    }
}



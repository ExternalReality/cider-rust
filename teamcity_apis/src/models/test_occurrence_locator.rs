/*
 * TeamCity REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestOccurrenceLocator {
    #[serde(rename = "affectedProject", skip_serializing_if = "Option::is_none")]
    pub affected_project: Option<String>,
    #[serde(rename = "branch", skip_serializing_if = "Option::is_none")]
    pub branch: Option<String>,
    #[serde(rename = "build", skip_serializing_if = "Option::is_none")]
    pub build: Option<String>,
    #[serde(rename = "buildType", skip_serializing_if = "Option::is_none")]
    pub build_type: Option<String>,
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(rename = "currentlyFailing", skip_serializing_if = "Option::is_none")]
    pub currently_failing: Option<bool>,
    #[serde(rename = "currentlyInvestigated", skip_serializing_if = "Option::is_none")]
    pub currently_investigated: Option<bool>,
    #[serde(rename = "currentlyMuted", skip_serializing_if = "Option::is_none")]
    pub currently_muted: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "ignored", skip_serializing_if = "Option::is_none")]
    pub ignored: Option<bool>,
    #[serde(rename = "includePersonal", skip_serializing_if = "Option::is_none")]
    pub include_personal: Option<String>,
    #[serde(rename = "item", skip_serializing_if = "Option::is_none")]
    pub item: Option<String>,
    #[serde(rename = "lookupLimit", skip_serializing_if = "Option::is_none")]
    pub lookup_limit: Option<i32>,
    #[serde(rename = "muted", skip_serializing_if = "Option::is_none")]
    pub muted: Option<bool>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "newFailure", skip_serializing_if = "Option::is_none")]
    pub new_failure: Option<String>,
    #[serde(rename = "start", skip_serializing_if = "Option::is_none")]
    pub start: Option<i32>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "test", skip_serializing_if = "Option::is_none")]
    pub test: Option<String>,
}

impl TestOccurrenceLocator {
    pub fn new() -> TestOccurrenceLocator {
        TestOccurrenceLocator {
            affected_project: None,
            branch: None,
            build: None,
            build_type: None,
            count: None,
            currently_failing: None,
            currently_investigated: None,
            currently_muted: None,
            id: None,
            ignored: None,
            include_personal: None,
            item: None,
            lookup_limit: None,
            muted: None,
            name: None,
            new_failure: None,
            start: None,
            status: None,
            test: None,
        }
    }
}



/*
 * TeamCity REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method `add_agent_requirement_to_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddAgentRequirementToBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `add_artifact_dependency_to_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddArtifactDependencyToBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `add_build_feature_to_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddBuildFeatureToBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `add_build_step_to_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddBuildStepToBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `add_build_template`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddBuildTemplateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `add_parameter_to_build_feature`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddParameterToBuildFeatureError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `add_parameter_to_build_step`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddParameterToBuildStepError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `add_snapshot_dependency_to_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddSnapshotDependencyToBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `add_trigger_to_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddTriggerToBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `add_vcs_root_to_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddVcsRootToBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_build_parameter_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateBuildParameterOfBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_agent_requirement`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteAgentRequirementError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_artifact_dependency`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteArtifactDependencyError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_build_parameter_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteBuildParameterOfBuildTypeError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_build_parameters_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteBuildParametersOfBuildTypeError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_build_step`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteBuildStepError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_build_step_parameters`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteBuildStepParametersError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteBuildTypeError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_feature_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteFeatureOfBuildTypeError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_snapshot_dependency`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSnapshotDependencyError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_trigger`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteTriggerError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_vcs_root_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteVcsRootOfBuildTypeError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `download_file_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DownloadFileOfBuildTypeError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_agent_requirement`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAgentRequirementError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_agent_requirement_parameter`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAgentRequirementParameterError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_aliases`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAliasesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_all_agent_requirements`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllAgentRequirementsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_all_artifact_dependencies`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllArtifactDependenciesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_all_branches_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllBranchesOfBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_all_build_feature_parameters`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllBuildFeatureParametersError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_all_build_features`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllBuildFeaturesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_all_build_step_parameters`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllBuildStepParametersError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_all_build_steps`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllBuildStepsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_all_build_templates`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllBuildTemplatesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_all_build_types`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllBuildTypesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_all_investigations_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllInvestigationsOfBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_all_snapshot_dependencies`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllSnapshotDependenciesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_all_triggers`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllTriggersError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_all_vcs_roots_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllVcsRootsOfBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_artifact_dependency`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetArtifactDependencyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_artifact_dependency_parameter`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetArtifactDependencyParameterError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_build_feature`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBuildFeatureError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_build_feature_parameter`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBuildFeatureParameterError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_build_feature_setting`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBuildFeatureSettingError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_build_parameter_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBuildParameterOfBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_build_parameter_specification_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBuildParameterSpecificationOfBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_build_parameter_type_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBuildParameterTypeOfBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_build_parameter_value_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBuildParameterValueOfBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_build_parameters_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBuildParametersOfBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_build_step`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBuildStepError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_build_step_parameter`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBuildStepParameterError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_build_step_setting`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBuildStepSettingError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_build_template`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBuildTemplateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_build_type_build_tags`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBuildTypeBuildTagsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_build_type_builds`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBuildTypeBuildsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_build_type_field`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBuildTypeFieldError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_build_type_settings_file`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBuildTypeSettingsFileError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_file_metadata_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFileMetadataOfBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_files_list_for_subpath_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFilesListForSubpathOfBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_files_list_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFilesListOfBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_snapshot_dependency`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSnapshotDependencyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_trigger`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTriggerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_trigger_parameter`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTriggerParameterError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_vcs_root`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetVcsRootError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_vcs_root_checkout_rules`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetVcsRootCheckoutRulesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_vcs_root_instances_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetVcsRootInstancesOfBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_zipped_file_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetZippedFileOfBuildTypeError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `remove_all_templates`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveAllTemplatesError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `remove_template`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveTemplateError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `replace_agent_requirement`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReplaceAgentRequirementError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `replace_all_agent_requirements`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReplaceAllAgentRequirementsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `replace_all_artifact_dependencies`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReplaceAllArtifactDependenciesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `replace_all_build_features`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReplaceAllBuildFeaturesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `replace_all_build_steps`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReplaceAllBuildStepsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `replace_all_snapshot_dependencies`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReplaceAllSnapshotDependenciesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `replace_all_triggers`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReplaceAllTriggersError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `replace_all_vcs_roots`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReplaceAllVcsRootsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `replace_artifact_dependency`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReplaceArtifactDependencyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `replace_build_feature`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReplaceBuildFeatureError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `replace_build_feature_parameters`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReplaceBuildFeatureParametersError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `replace_build_step`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReplaceBuildStepError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `replace_snapshot_dependency`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReplaceSnapshotDependencyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `replace_trigger`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReplaceTriggerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_agent_requirement_parameter`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetAgentRequirementParameterError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_artifact_dependency_parameter`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetArtifactDependencyParameterError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_build_feature_parameter`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetBuildFeatureParameterError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_build_step_parameter`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetBuildStepParameterError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_build_type_field`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetBuildTypeFieldError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_build_type_templates`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetBuildTypeTemplatesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_trigger_parameter`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetTriggerParameterError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `update_build_parameter_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateBuildParameterOfBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `update_build_parameter_specification_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateBuildParameterSpecificationOfBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `update_build_parameter_type_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateBuildParameterTypeOfBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `update_build_parameter_value_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateBuildParameterValueOfBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `update_build_parameters_of_build_type`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateBuildParametersOfBuildTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `update_build_type_vcs_root`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateBuildTypeVcsRootError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `update_build_type_vcs_root_checkout_rules`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateBuildTypeVcsRootCheckoutRulesError {
    UnknownValue(serde_json::Value),
}


pub async fn add_agent_requirement_to_build_type(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>, body: Option<crate::models::AgentRequirement>) -> Result<crate::models::AgentRequirement, Error<AddAgentRequirementToBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/agent-requirements", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AddAgentRequirementToBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn add_artifact_dependency_to_build_type(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>, body: Option<crate::models::ArtifactDependency>) -> Result<crate::models::ArtifactDependency, Error<AddArtifactDependencyToBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/artifact-dependencies", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AddArtifactDependencyToBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn add_build_feature_to_build_type(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>, body: Option<crate::models::Feature>) -> Result<crate::models::Feature, Error<AddBuildFeatureToBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/features", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AddBuildFeatureToBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn add_build_step_to_build_type(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>, body: Option<crate::models::Step>) -> Result<crate::models::Step, Error<AddBuildStepToBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/steps", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AddBuildStepToBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn add_build_template(configuration: &configuration::Configuration, bt_locator: &str, optimize_settings: Option<bool>, fields: Option<&str>, body: Option<crate::models::BuildType>) -> Result<crate::models::BuildType, Error<AddBuildTemplateError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/templates", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = optimize_settings {
        local_var_req_builder = local_var_req_builder.query(&[("optimizeSettings", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AddBuildTemplateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn add_parameter_to_build_feature(configuration: &configuration::Configuration, bt_locator: &str, feature_id: &str, parameter_name: &str, body: Option<&str>) -> Result<String, Error<AddParameterToBuildFeatureError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), featureId=crate::apis::urlencode(feature_id), parameterName=crate::apis::urlencode(parameter_name));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AddParameterToBuildFeatureError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn add_parameter_to_build_step(configuration: &configuration::Configuration, bt_locator: &str, step_id: &str, parameter_name: &str, body: Option<&str>) -> Result<String, Error<AddParameterToBuildStepError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), stepId=crate::apis::urlencode(step_id), parameterName=crate::apis::urlencode(parameter_name));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AddParameterToBuildStepError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn add_snapshot_dependency_to_build_type(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>, body: Option<crate::models::SnapshotDependency>) -> Result<crate::models::SnapshotDependency, Error<AddSnapshotDependencyToBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/snapshot-dependencies", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AddSnapshotDependencyToBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn add_trigger_to_build_type(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>, body: Option<crate::models::Trigger>) -> Result<crate::models::Trigger, Error<AddTriggerToBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/triggers", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AddTriggerToBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn add_vcs_root_to_build_type(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>, body: Option<crate::models::VcsRootEntry>) -> Result<crate::models::VcsRootEntry, Error<AddVcsRootToBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/vcs-root-entries", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AddVcsRootToBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn create_build_parameter_of_build_type(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>, body: Option<crate::models::Property>) -> Result<crate::models::Property, Error<CreateBuildParameterOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/parameters", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateBuildParameterOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn create_build_type(configuration: &configuration::Configuration, fields: Option<&str>, body: Option<crate::models::BuildType>) -> Result<crate::models::BuildType, Error<CreateBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_agent_requirement(configuration: &configuration::Configuration, bt_locator: &str, agent_requirement_locator: &str) -> Result<(), Error<DeleteAgentRequirementError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), agentRequirementLocator=crate::apis::urlencode(agent_requirement_locator));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteAgentRequirementError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_artifact_dependency(configuration: &configuration::Configuration, bt_locator: &str, artifact_dep_locator: &str) -> Result<(), Error<DeleteArtifactDependencyError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), artifactDepLocator=crate::apis::urlencode(artifact_dep_locator));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteArtifactDependencyError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_build_parameter_of_build_type(configuration: &configuration::Configuration, name: &str, bt_locator: &str) -> Result<(), Error<DeleteBuildParameterOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/parameters/{name}", configuration.base_path, name=crate::apis::urlencode(name), btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteBuildParameterOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_build_parameters_of_build_type(configuration: &configuration::Configuration, bt_locator: &str) -> Result<(), Error<DeleteBuildParametersOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/parameters", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteBuildParametersOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_build_step(configuration: &configuration::Configuration, bt_locator: &str, step_id: &str) -> Result<(), Error<DeleteBuildStepError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/steps/{stepId}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), stepId=crate::apis::urlencode(step_id));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteBuildStepError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_build_step_parameters(configuration: &configuration::Configuration, bt_locator: &str, step_id: &str, fields: Option<&str>, body: Option<crate::models::Properties>) -> Result<crate::models::Properties, Error<DeleteBuildStepParametersError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), stepId=crate::apis::urlencode(step_id));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteBuildStepParametersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_build_type(configuration: &configuration::Configuration, bt_locator: &str) -> Result<(), Error<DeleteBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_feature_of_build_type(configuration: &configuration::Configuration, bt_locator: &str, feature_id: &str) -> Result<(), Error<DeleteFeatureOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/features/{featureId}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), featureId=crate::apis::urlencode(feature_id));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteFeatureOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_snapshot_dependency(configuration: &configuration::Configuration, bt_locator: &str, snapshot_dep_locator: &str) -> Result<(), Error<DeleteSnapshotDependencyError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), snapshotDepLocator=crate::apis::urlencode(snapshot_dep_locator));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteSnapshotDependencyError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_trigger(configuration: &configuration::Configuration, bt_locator: &str, trigger_locator: &str) -> Result<(), Error<DeleteTriggerError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), triggerLocator=crate::apis::urlencode(trigger_locator));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteTriggerError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_vcs_root_of_build_type(configuration: &configuration::Configuration, bt_locator: &str, vcs_root_locator: &str) -> Result<(), Error<DeleteVcsRootOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), vcsRootLocator=crate::apis::urlencode(vcs_root_locator));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteVcsRootOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn download_file_of_build_type(configuration: &configuration::Configuration, path: &str, bt_locator: &str, resolve_parameters: Option<bool>) -> Result<(), Error<DownloadFileOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/vcs/files/latest/files{path}", configuration.base_path, path=crate::apis::urlencode(path), btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = resolve_parameters {
        local_var_req_builder = local_var_req_builder.query(&[("resolveParameters", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DownloadFileOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_agent_requirement(configuration: &configuration::Configuration, bt_locator: &str, agent_requirement_locator: &str, fields: Option<&str>) -> Result<crate::models::AgentRequirement, Error<GetAgentRequirementError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), agentRequirementLocator=crate::apis::urlencode(agent_requirement_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAgentRequirementError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_agent_requirement_parameter(configuration: &configuration::Configuration, bt_locator: &str, agent_requirement_locator: &str, field_name: &str) -> Result<String, Error<GetAgentRequirementParameterError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), agentRequirementLocator=crate::apis::urlencode(agent_requirement_locator), fieldName=crate::apis::urlencode(field_name));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAgentRequirementParameterError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_aliases(configuration: &configuration::Configuration, bt_locator: &str, field: Option<&str>) -> Result<crate::models::Items, Error<GetAliasesError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/aliases", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = field {
        local_var_req_builder = local_var_req_builder.query(&[("field", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAliasesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_all_agent_requirements(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>) -> Result<crate::models::AgentRequirements, Error<GetAllAgentRequirementsError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/agent-requirements", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllAgentRequirementsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_all_artifact_dependencies(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>) -> Result<crate::models::ArtifactDependencies, Error<GetAllArtifactDependenciesError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/artifact-dependencies", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllArtifactDependenciesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_all_branches_of_build_type(configuration: &configuration::Configuration, bt_locator: &str, locator: Option<&str>, fields: Option<&str>) -> Result<crate::models::Branches, Error<GetAllBranchesOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/branches", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = locator {
        local_var_req_builder = local_var_req_builder.query(&[("locator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllBranchesOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_all_build_feature_parameters(configuration: &configuration::Configuration, bt_locator: &str, feature_id: &str, fields: Option<&str>) -> Result<crate::models::Properties, Error<GetAllBuildFeatureParametersError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), featureId=crate::apis::urlencode(feature_id));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllBuildFeatureParametersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_all_build_features(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>) -> Result<crate::models::Features, Error<GetAllBuildFeaturesError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/features", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllBuildFeaturesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_all_build_step_parameters(configuration: &configuration::Configuration, bt_locator: &str, step_id: &str, fields: Option<&str>) -> Result<crate::models::Properties, Error<GetAllBuildStepParametersError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), stepId=crate::apis::urlencode(step_id));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllBuildStepParametersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_all_build_steps(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>) -> Result<crate::models::Steps, Error<GetAllBuildStepsError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/steps", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllBuildStepsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_all_build_templates(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>) -> Result<crate::models::BuildTypes, Error<GetAllBuildTemplatesError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/templates", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllBuildTemplatesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_all_build_types(configuration: &configuration::Configuration, locator: Option<&str>, fields: Option<&str>) -> Result<crate::models::BuildTypes, Error<GetAllBuildTypesError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = locator {
        local_var_req_builder = local_var_req_builder.query(&[("locator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token);
    }

    local_var_req_builder = local_var_req_builder.header(reqwest::header::ACCEPT, "application/json");
    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllBuildTypesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_all_investigations_of_build_type(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>) -> Result<crate::models::Investigations, Error<GetAllInvestigationsOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/investigations", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllInvestigationsOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_all_snapshot_dependencies(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>) -> Result<crate::models::SnapshotDependencies, Error<GetAllSnapshotDependenciesError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/snapshot-dependencies", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllSnapshotDependenciesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_all_triggers(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>) -> Result<crate::models::Triggers, Error<GetAllTriggersError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/triggers", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllTriggersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_all_vcs_roots_of_build_type(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>) -> Result<crate::models::VcsRootEntries, Error<GetAllVcsRootsOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/vcs-root-entries", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllVcsRootsOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_artifact_dependency(configuration: &configuration::Configuration, bt_locator: &str, artifact_dep_locator: &str, fields: Option<&str>) -> Result<crate::models::ArtifactDependency, Error<GetArtifactDependencyError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), artifactDepLocator=crate::apis::urlencode(artifact_dep_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetArtifactDependencyError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_artifact_dependency_parameter(configuration: &configuration::Configuration, bt_locator: &str, artifact_dep_locator: &str, field_name: &str) -> Result<String, Error<GetArtifactDependencyParameterError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), artifactDepLocator=crate::apis::urlencode(artifact_dep_locator), fieldName=crate::apis::urlencode(field_name));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetArtifactDependencyParameterError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_build_feature(configuration: &configuration::Configuration, bt_locator: &str, feature_id: &str, fields: Option<&str>) -> Result<crate::models::Feature, Error<GetBuildFeatureError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/features/{featureId}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), featureId=crate::apis::urlencode(feature_id));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBuildFeatureError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_build_feature_parameter(configuration: &configuration::Configuration, bt_locator: &str, feature_id: &str, parameter_name: &str) -> Result<String, Error<GetBuildFeatureParameterError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), featureId=crate::apis::urlencode(feature_id), parameterName=crate::apis::urlencode(parameter_name));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBuildFeatureParameterError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_build_feature_setting(configuration: &configuration::Configuration, bt_locator: &str, feature_id: &str, name: &str) -> Result<String, Error<GetBuildFeatureSettingError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), featureId=crate::apis::urlencode(feature_id), name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBuildFeatureSettingError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_build_parameter_of_build_type(configuration: &configuration::Configuration, name: &str, bt_locator: &str, fields: Option<&str>) -> Result<crate::models::Property, Error<GetBuildParameterOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/parameters/{name}", configuration.base_path, name=crate::apis::urlencode(name), btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBuildParameterOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_build_parameter_specification_of_build_type(configuration: &configuration::Configuration, name: &str, bt_locator: &str) -> Result<String, Error<GetBuildParameterSpecificationOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue", configuration.base_path, name=crate::apis::urlencode(name), btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBuildParameterSpecificationOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_build_parameter_type_of_build_type(configuration: &configuration::Configuration, name: &str, bt_locator: &str) -> Result<crate::models::ModelType, Error<GetBuildParameterTypeOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/parameters/{name}/type", configuration.base_path, name=crate::apis::urlencode(name), btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBuildParameterTypeOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_build_parameter_value_of_build_type(configuration: &configuration::Configuration, name: &str, bt_locator: &str) -> Result<String, Error<GetBuildParameterValueOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/parameters/{name}/value", configuration.base_path, name=crate::apis::urlencode(name), btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBuildParameterValueOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_build_parameters_of_build_type(configuration: &configuration::Configuration, bt_locator: &str, locator: Option<&str>, fields: Option<&str>) -> Result<crate::models::Properties, Error<GetBuildParametersOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/parameters", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = locator {
        local_var_req_builder = local_var_req_builder.query(&[("locator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBuildParametersOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_build_step(configuration: &configuration::Configuration, bt_locator: &str, step_id: &str, fields: Option<&str>) -> Result<crate::models::Step, Error<GetBuildStepError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/steps/{stepId}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), stepId=crate::apis::urlencode(step_id));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBuildStepError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_build_step_parameter(configuration: &configuration::Configuration, bt_locator: &str, step_id: &str, parameter_name: &str) -> Result<String, Error<GetBuildStepParameterError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), stepId=crate::apis::urlencode(step_id), parameterName=crate::apis::urlencode(parameter_name));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBuildStepParameterError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_build_step_setting(configuration: &configuration::Configuration, bt_locator: &str, step_id: &str, field_name: &str) -> Result<String, Error<GetBuildStepSettingError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), stepId=crate::apis::urlencode(step_id), fieldName=crate::apis::urlencode(field_name));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBuildStepSettingError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_build_template(configuration: &configuration::Configuration, bt_locator: &str, template_locator: &str, fields: Option<&str>) -> Result<crate::models::BuildType, Error<GetBuildTemplateError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/templates/{templateLocator}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), templateLocator=crate::apis::urlencode(template_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBuildTemplateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_build_type(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>) -> Result<crate::models::BuildType, Error<GetBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_build_type_build_tags(configuration: &configuration::Configuration, bt_locator: &str, field: Option<&str>) -> Result<crate::models::Tags, Error<GetBuildTypeBuildTagsError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/buildTags", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = field {
        local_var_req_builder = local_var_req_builder.query(&[("field", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBuildTypeBuildTagsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_build_type_builds(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>) -> Result<crate::models::Builds, Error<GetBuildTypeBuildsError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/builds", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBuildTypeBuildsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_build_type_field(configuration: &configuration::Configuration, bt_locator: &str, field: &str) -> Result<String, Error<GetBuildTypeFieldError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/{field}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), field=crate::apis::urlencode(field));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBuildTypeFieldError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_build_type_settings_file(configuration: &configuration::Configuration, bt_locator: &str) -> Result<String, Error<GetBuildTypeSettingsFileError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/settingsFile", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBuildTypeSettingsFileError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_file_metadata_of_build_type(configuration: &configuration::Configuration, path: &str, bt_locator: &str, fields: Option<&str>, resolve_parameters: Option<bool>) -> Result<std::path::PathBuf, Error<GetFileMetadataOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/vcs/files/latest/metadata{path}", configuration.base_path, path=crate::apis::urlencode(path), btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = resolve_parameters {
        local_var_req_builder = local_var_req_builder.query(&[("resolveParameters", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetFileMetadataOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_files_list_for_subpath_of_build_type(configuration: &configuration::Configuration, path: &str, bt_locator: &str, base_path: Option<&str>, locator: Option<&str>, fields: Option<&str>, resolve_parameters: Option<bool>) -> Result<crate::models::Files, Error<GetFilesListForSubpathOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/vcs/files/latest/{path}", configuration.base_path, path=crate::apis::urlencode(path), btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = base_path {
        local_var_req_builder = local_var_req_builder.query(&[("basePath", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = locator {
        local_var_req_builder = local_var_req_builder.query(&[("locator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = resolve_parameters {
        local_var_req_builder = local_var_req_builder.query(&[("resolveParameters", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetFilesListForSubpathOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_files_list_of_build_type(configuration: &configuration::Configuration, bt_locator: &str, base_path: Option<&str>, locator: Option<&str>, fields: Option<&str>, resolve_parameters: Option<bool>) -> Result<crate::models::Files, Error<GetFilesListOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/vcs/files/latest", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = base_path {
        local_var_req_builder = local_var_req_builder.query(&[("basePath", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = locator {
        local_var_req_builder = local_var_req_builder.query(&[("locator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = resolve_parameters {
        local_var_req_builder = local_var_req_builder.query(&[("resolveParameters", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetFilesListOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_snapshot_dependency(configuration: &configuration::Configuration, bt_locator: &str, snapshot_dep_locator: &str, fields: Option<&str>) -> Result<crate::models::SnapshotDependency, Error<GetSnapshotDependencyError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), snapshotDepLocator=crate::apis::urlencode(snapshot_dep_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetSnapshotDependencyError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_trigger(configuration: &configuration::Configuration, bt_locator: &str, trigger_locator: &str, fields: Option<&str>) -> Result<crate::models::Trigger, Error<GetTriggerError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), triggerLocator=crate::apis::urlencode(trigger_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetTriggerError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_trigger_parameter(configuration: &configuration::Configuration, bt_locator: &str, trigger_locator: &str, field_name: &str) -> Result<String, Error<GetTriggerParameterError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), triggerLocator=crate::apis::urlencode(trigger_locator), fieldName=crate::apis::urlencode(field_name));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetTriggerParameterError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_vcs_root(configuration: &configuration::Configuration, bt_locator: &str, vcs_root_locator: &str, fields: Option<&str>) -> Result<crate::models::VcsRootEntry, Error<GetVcsRootError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), vcsRootLocator=crate::apis::urlencode(vcs_root_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetVcsRootError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_vcs_root_checkout_rules(configuration: &configuration::Configuration, bt_locator: &str, vcs_root_locator: &str) -> Result<String, Error<GetVcsRootCheckoutRulesError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), vcsRootLocator=crate::apis::urlencode(vcs_root_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetVcsRootCheckoutRulesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_vcs_root_instances_of_build_type(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>) -> Result<crate::models::VcsRootInstances, Error<GetVcsRootInstancesOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/vcsRootInstances", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetVcsRootInstancesOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_zipped_file_of_build_type(configuration: &configuration::Configuration, path: &str, bt_locator: &str, base_path: Option<&str>, locator: Option<&str>, name: Option<&str>, resolve_parameters: Option<bool>) -> Result<(), Error<GetZippedFileOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/vcs/files/latest/archived{path}", configuration.base_path, path=crate::apis::urlencode(path), btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = base_path {
        local_var_req_builder = local_var_req_builder.query(&[("basePath", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = locator {
        local_var_req_builder = local_var_req_builder.query(&[("locator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = resolve_parameters {
        local_var_req_builder = local_var_req_builder.query(&[("resolveParameters", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GetZippedFileOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn remove_all_templates(configuration: &configuration::Configuration, bt_locator: &str, inline_settings: Option<bool>) -> Result<(), Error<RemoveAllTemplatesError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/templates", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = inline_settings {
        local_var_req_builder = local_var_req_builder.query(&[("inlineSettings", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<RemoveAllTemplatesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn remove_template(configuration: &configuration::Configuration, bt_locator: &str, template_locator: &str, inline_settings: Option<bool>) -> Result<(), Error<RemoveTemplateError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/templates/{templateLocator}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), templateLocator=crate::apis::urlencode(template_locator));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = inline_settings {
        local_var_req_builder = local_var_req_builder.query(&[("inlineSettings", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<RemoveTemplateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn replace_agent_requirement(configuration: &configuration::Configuration, bt_locator: &str, agent_requirement_locator: &str, fields: Option<&str>, body: Option<crate::models::AgentRequirement>) -> Result<crate::models::AgentRequirement, Error<ReplaceAgentRequirementError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), agentRequirementLocator=crate::apis::urlencode(agent_requirement_locator));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ReplaceAgentRequirementError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn replace_all_agent_requirements(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>, body: Option<crate::models::AgentRequirements>) -> Result<crate::models::AgentRequirements, Error<ReplaceAllAgentRequirementsError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/agent-requirements", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ReplaceAllAgentRequirementsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn replace_all_artifact_dependencies(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>, body: Option<crate::models::ArtifactDependencies>) -> Result<crate::models::ArtifactDependencies, Error<ReplaceAllArtifactDependenciesError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/artifact-dependencies", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ReplaceAllArtifactDependenciesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn replace_all_build_features(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>, body: Option<crate::models::Features>) -> Result<crate::models::Features, Error<ReplaceAllBuildFeaturesError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/features", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ReplaceAllBuildFeaturesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn replace_all_build_steps(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>, body: Option<crate::models::Steps>) -> Result<crate::models::Steps, Error<ReplaceAllBuildStepsError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/steps", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ReplaceAllBuildStepsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn replace_all_snapshot_dependencies(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>, body: Option<crate::models::SnapshotDependencies>) -> Result<crate::models::SnapshotDependencies, Error<ReplaceAllSnapshotDependenciesError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/snapshot-dependencies", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ReplaceAllSnapshotDependenciesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn replace_all_triggers(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>, body: Option<crate::models::Triggers>) -> Result<crate::models::Triggers, Error<ReplaceAllTriggersError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/triggers", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ReplaceAllTriggersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn replace_all_vcs_roots(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>, body: Option<crate::models::VcsRootEntries>) -> Result<crate::models::VcsRootEntries, Error<ReplaceAllVcsRootsError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/vcs-root-entries", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ReplaceAllVcsRootsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn replace_artifact_dependency(configuration: &configuration::Configuration, bt_locator: &str, artifact_dep_locator: &str, fields: Option<&str>, body: Option<crate::models::ArtifactDependency>) -> Result<crate::models::ArtifactDependency, Error<ReplaceArtifactDependencyError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), artifactDepLocator=crate::apis::urlencode(artifact_dep_locator));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ReplaceArtifactDependencyError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn replace_build_feature(configuration: &configuration::Configuration, bt_locator: &str, feature_id: &str, fields: Option<&str>, body: Option<crate::models::Feature>) -> Result<crate::models::Feature, Error<ReplaceBuildFeatureError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/features/{featureId}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), featureId=crate::apis::urlencode(feature_id));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ReplaceBuildFeatureError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn replace_build_feature_parameters(configuration: &configuration::Configuration, bt_locator: &str, feature_id: &str, fields: Option<&str>, body: Option<crate::models::Properties>) -> Result<crate::models::Properties, Error<ReplaceBuildFeatureParametersError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), featureId=crate::apis::urlencode(feature_id));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ReplaceBuildFeatureParametersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn replace_build_step(configuration: &configuration::Configuration, bt_locator: &str, step_id: &str, fields: Option<&str>, body: Option<crate::models::Step>) -> Result<crate::models::Step, Error<ReplaceBuildStepError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/steps/{stepId}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), stepId=crate::apis::urlencode(step_id));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ReplaceBuildStepError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn replace_snapshot_dependency(configuration: &configuration::Configuration, bt_locator: &str, snapshot_dep_locator: &str, fields: Option<&str>, body: Option<crate::models::SnapshotDependency>) -> Result<crate::models::SnapshotDependency, Error<ReplaceSnapshotDependencyError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), snapshotDepLocator=crate::apis::urlencode(snapshot_dep_locator));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ReplaceSnapshotDependencyError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn replace_trigger(configuration: &configuration::Configuration, bt_locator: &str, trigger_locator: &str, fields: Option<&str>, body: Option<crate::models::Trigger>) -> Result<crate::models::Trigger, Error<ReplaceTriggerError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), triggerLocator=crate::apis::urlencode(trigger_locator));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ReplaceTriggerError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_agent_requirement_parameter(configuration: &configuration::Configuration, bt_locator: &str, agent_requirement_locator: &str, field_name: &str, body: Option<&str>) -> Result<String, Error<SetAgentRequirementParameterError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), agentRequirementLocator=crate::apis::urlencode(agent_requirement_locator), fieldName=crate::apis::urlencode(field_name));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetAgentRequirementParameterError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_artifact_dependency_parameter(configuration: &configuration::Configuration, bt_locator: &str, artifact_dep_locator: &str, field_name: &str, body: Option<&str>) -> Result<String, Error<SetArtifactDependencyParameterError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), artifactDepLocator=crate::apis::urlencode(artifact_dep_locator), fieldName=crate::apis::urlencode(field_name));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetArtifactDependencyParameterError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_build_feature_parameter(configuration: &configuration::Configuration, bt_locator: &str, feature_id: &str, name: &str, body: Option<&str>) -> Result<String, Error<SetBuildFeatureParameterError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), featureId=crate::apis::urlencode(feature_id), name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetBuildFeatureParameterError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_build_step_parameter(configuration: &configuration::Configuration, bt_locator: &str, step_id: &str, field_name: &str, body: Option<&str>) -> Result<String, Error<SetBuildStepParameterError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), stepId=crate::apis::urlencode(step_id), fieldName=crate::apis::urlencode(field_name));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetBuildStepParameterError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_build_type_field(configuration: &configuration::Configuration, bt_locator: &str, field: &str, body: Option<&str>) -> Result<String, Error<SetBuildTypeFieldError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/{field}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), field=crate::apis::urlencode(field));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetBuildTypeFieldError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_build_type_templates(configuration: &configuration::Configuration, bt_locator: &str, optimize_settings: Option<bool>, fields: Option<&str>, body: Option<crate::models::BuildTypes>) -> Result<crate::models::BuildTypes, Error<SetBuildTypeTemplatesError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/templates", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = optimize_settings {
        local_var_req_builder = local_var_req_builder.query(&[("optimizeSettings", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetBuildTypeTemplatesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_trigger_parameter(configuration: &configuration::Configuration, bt_locator: &str, trigger_locator: &str, field_name: &str, body: Option<&str>) -> Result<String, Error<SetTriggerParameterError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), triggerLocator=crate::apis::urlencode(trigger_locator), fieldName=crate::apis::urlencode(field_name));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetTriggerParameterError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_build_parameter_of_build_type(configuration: &configuration::Configuration, name: &str, bt_locator: &str, fields: Option<&str>, body: Option<crate::models::Property>) -> Result<crate::models::Property, Error<UpdateBuildParameterOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/parameters/{name}", configuration.base_path, name=crate::apis::urlencode(name), btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateBuildParameterOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_build_parameter_specification_of_build_type(configuration: &configuration::Configuration, name: &str, bt_locator: &str, body: Option<&str>) -> Result<String, Error<UpdateBuildParameterSpecificationOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue", configuration.base_path, name=crate::apis::urlencode(name), btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateBuildParameterSpecificationOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_build_parameter_type_of_build_type(configuration: &configuration::Configuration, name: &str, bt_locator: &str, body: Option<crate::models::ModelType>) -> Result<crate::models::ModelType, Error<UpdateBuildParameterTypeOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/parameters/{name}/type", configuration.base_path, name=crate::apis::urlencode(name), btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateBuildParameterTypeOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_build_parameter_value_of_build_type(configuration: &configuration::Configuration, name: &str, bt_locator: &str, body: Option<&str>) -> Result<String, Error<UpdateBuildParameterValueOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/parameters/{name}/value", configuration.base_path, name=crate::apis::urlencode(name), btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateBuildParameterValueOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_build_parameters_of_build_type(configuration: &configuration::Configuration, bt_locator: &str, fields: Option<&str>, body: Option<crate::models::Properties>) -> Result<crate::models::Properties, Error<UpdateBuildParametersOfBuildTypeError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/parameters", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateBuildParametersOfBuildTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_build_type_vcs_root(configuration: &configuration::Configuration, bt_locator: &str, vcs_root_locator: &str, fields: Option<&str>, body: Option<crate::models::VcsRootEntry>) -> Result<crate::models::VcsRootEntry, Error<UpdateBuildTypeVcsRootError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), vcsRootLocator=crate::apis::urlencode(vcs_root_locator));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateBuildTypeVcsRootError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_build_type_vcs_root_checkout_rules(configuration: &configuration::Configuration, bt_locator: &str, vcs_root_locator: &str, body: Option<&str>) -> Result<String, Error<UpdateBuildTypeVcsRootCheckoutRulesError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules", configuration.base_path, btLocator=crate::apis::urlencode(bt_locator), vcsRootLocator=crate::apis::urlencode(vcs_root_locator));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateBuildTypeVcsRootCheckoutRulesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}


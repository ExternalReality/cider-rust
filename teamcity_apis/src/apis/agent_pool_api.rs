/*
 * TeamCity REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018.1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method `add_agent_to_agent_pool`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddAgentToAgentPoolError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `add_project_to_agent_pool`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddProjectToAgentPoolError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_agent_pool`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateAgentPoolError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_agent_pool`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteAgentPoolError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_all_projects_from_agent_pool`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteAllProjectsFromAgentPoolError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_project_from_agent_pool`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteProjectFromAgentPoolError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_agent_pool_of_agent_pool`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAgentPoolOfAgentPoolError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_all_agent_pools`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllAgentPoolsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_all_agents_from_agent_pool`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllAgentsFromAgentPoolError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_all_projects_from_agent_pool`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllProjectsFromAgentPoolError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_field_from_agent_pool`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFieldFromAgentPoolError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_agent_pool_field`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetAgentPoolFieldError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_agent_pool_projects`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetAgentPoolProjectsError {
    UnknownValue(serde_json::Value),
}


pub async fn add_agent_to_agent_pool(configuration: &configuration::Configuration, agent_pool_locator: &str, fields: Option<&str>, body: Option<crate::models::Agent>) -> Result<crate::models::Agent, Error<AddAgentToAgentPoolError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/agentPools/{agentPoolLocator}/agents", configuration.base_path, agentPoolLocator=crate::apis::urlencode(agent_pool_locator));
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AddAgentToAgentPoolError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn add_project_to_agent_pool(configuration: &configuration::Configuration, agent_pool_locator: &str, body: Option<crate::models::Project>) -> Result<crate::models::Project, Error<AddProjectToAgentPoolError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/agentPools/{agentPoolLocator}/projects", configuration.base_path, agentPoolLocator=crate::apis::urlencode(agent_pool_locator));
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AddProjectToAgentPoolError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn create_agent_pool(configuration: &configuration::Configuration, body: Option<crate::models::AgentPool>) -> Result<crate::models::AgentPool, Error<CreateAgentPoolError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/agentPools", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateAgentPoolError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_agent_pool(configuration: &configuration::Configuration, agent_pool_locator: &str) -> Result<(), Error<DeleteAgentPoolError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/agentPools/{agentPoolLocator}", configuration.base_path, agentPoolLocator=crate::apis::urlencode(agent_pool_locator));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteAgentPoolError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_all_projects_from_agent_pool(configuration: &configuration::Configuration, agent_pool_locator: &str) -> Result<(), Error<DeleteAllProjectsFromAgentPoolError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/agentPools/{agentPoolLocator}/projects", configuration.base_path, agentPoolLocator=crate::apis::urlencode(agent_pool_locator));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteAllProjectsFromAgentPoolError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_project_from_agent_pool(configuration: &configuration::Configuration, agent_pool_locator: &str, project_locator: &str) -> Result<(), Error<DeleteProjectFromAgentPoolError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/agentPools/{agentPoolLocator}/projects/{projectLocator}", configuration.base_path, agentPoolLocator=crate::apis::urlencode(agent_pool_locator), projectLocator=crate::apis::urlencode(project_locator));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteProjectFromAgentPoolError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_agent_pool_of_agent_pool(configuration: &configuration::Configuration, agent_pool_locator: &str, fields: Option<&str>) -> Result<crate::models::AgentPool, Error<GetAgentPoolOfAgentPoolError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/agentPools/{agentPoolLocator}", configuration.base_path, agentPoolLocator=crate::apis::urlencode(agent_pool_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAgentPoolOfAgentPoolError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_all_agent_pools(configuration: &configuration::Configuration, locator: Option<&str>, fields: Option<&str>) -> Result<crate::models::AgentPools, Error<GetAllAgentPoolsError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/agentPools", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = locator {
        local_var_req_builder = local_var_req_builder.query(&[("locator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllAgentPoolsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_all_agents_from_agent_pool(configuration: &configuration::Configuration, agent_pool_locator: &str, locator: Option<&str>, fields: Option<&str>) -> Result<crate::models::Agents, Error<GetAllAgentsFromAgentPoolError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/agentPools/{agentPoolLocator}/agents", configuration.base_path, agentPoolLocator=crate::apis::urlencode(agent_pool_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = locator {
        local_var_req_builder = local_var_req_builder.query(&[("locator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllAgentsFromAgentPoolError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_all_projects_from_agent_pool(configuration: &configuration::Configuration, agent_pool_locator: &str, fields: Option<&str>) -> Result<crate::models::Projects, Error<GetAllProjectsFromAgentPoolError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/agentPools/{agentPoolLocator}/projects", configuration.base_path, agentPoolLocator=crate::apis::urlencode(agent_pool_locator));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllProjectsFromAgentPoolError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_field_from_agent_pool(configuration: &configuration::Configuration, agent_pool_locator: &str, field: &str) -> Result<String, Error<GetFieldFromAgentPoolError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/agentPools/{agentPoolLocator}/{field}", configuration.base_path, agentPoolLocator=crate::apis::urlencode(agent_pool_locator), field=crate::apis::urlencode(field));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetFieldFromAgentPoolError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_agent_pool_field(configuration: &configuration::Configuration, agent_pool_locator: &str, field: &str, body: Option<&str>) -> Result<String, Error<SetAgentPoolFieldError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/agentPools/{agentPoolLocator}/{field}", configuration.base_path, agentPoolLocator=crate::apis::urlencode(agent_pool_locator), field=crate::apis::urlencode(field));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetAgentPoolFieldError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_agent_pool_projects(configuration: &configuration::Configuration, agent_pool_locator: &str, body: Option<crate::models::Projects>) -> Result<crate::models::Projects, Error<SetAgentPoolProjectsError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/app/rest/agentPools/{agentPoolLocator}/projects", configuration.base_path, agentPoolLocator=crate::apis::urlencode(agent_pool_locator));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetAgentPoolProjectsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

